#!/usr/bin/env python3

from flask import Flask
from flask import request
from flask_restful import Resource, Api
from distance import levenshtein
from scipy.stats import percentileofscore
import time

from reader import string_generator

states = {}
strings = {}
attempts = {}
norm_scores = {}

app = Flask(__name__, static_url_path='/')
api = Api(app)

@app.route('/')
def root():
    return app.send_static_file('index.html')

class FetchString(Resource):
    def get(self):
        user = request.args.get('user', None)
        reset = int(request.args.get('reset', 0))
        last_score = None
        last_delta = None
        last_norm_score = None
        last_rank = None
        if reset and user in states:
            del states[user]
            del strings[user]
        if user:
            last_string = strings.get(user, None)
            if last_string:
                user_data = attempts.get(last_string)
                last_delta = time.time() - user_data[user].get('start')
                strokes = max(len(last_string), user_data[user].get('strokes'))
                mistakes = min(len(last_string), levenshtein(user_data[user].get('submission'), last_string))
                last_score = strokes - mistakes
                last_norm_score = last_score/last_delta
                norm_scores_str = norm_scores.get(last_string, [])
                norm_scores_str.append(last_norm_score)
                last_rank = percentileofscore(norm_scores_str, last_norm_score)
                norm_scores[last_string] = norm_scores_str
            states[user] = current_state = states.get(user, string_generator())
            strings[user] = current_string = next(current_state, None)
            if current_string:
                user_data = attempts.get(current_string, {})
                user_data[user] = {'start': time.time()}
                attempts[current_string] = user_data
                return {
                    'current_string': current_string,
                    'last_string': last_string,
                    'last_score': last_score,
                    'last_delta': last_delta,
                    'last_norm_score': last_norm_score,
                    'last_rank': last_rank,
                }
            else:
                return {'current_string': 'no more challenges'}
        return {'current_string': 'no user specified'}

class CheckString(Resource):
    def put(self):
        user = request.form.get('user', None)
        submission = request.form.get('submission', None)
        current_string = strings.get(user, None)
        print(user,submission,current_string)
        if current_string:
            user_data = attempts.get(current_string)
            strokes = user_data[user].get('strokes', 0) +1
            user_data[user].update({
                'strokes': strokes,
                'submission': submission,
            })
            return {'response': strokes}
        else:
            return {'response': 'unregistered'}

api.add_resource(FetchString, '/fetch-string')
api.add_resource(CheckString, '/check-string')

if __name__ == '__main__':
    app.run(debug=True)
