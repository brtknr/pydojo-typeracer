#!/usr/bin/env python3

from flask import Flask
from flask import request
from flask_restful import Resource, Api
import datetime
from distance import levenshtein

from reader import string_generator

attempts = {}
states = {}
strings = {}

app = Flask(__name__, static_url_path='/')
api = Api(app)

@app.route('/')
def root():
    return app.send_static_file('index.html')



class FetchString(Resource):
    def get(self):
        user = request.args.get('user', None)
        reset = int(request.args.get('reset', 0))
        print(reset)
        if reset and user in states:
            del states[user]
        if user:
            states[user] = current_state = states.get(user, string_generator())
            strings[user] = current_string = next(current_state, None)
            if current_string:
                users = attempts.get(current_string, {})
                users[user] = datetime.datetime.now()
                attempts[current_string] = users
                return {'current_string': current_string}
            else:
                return {'current_string': 'no more challenges'}
        return {'current_string': 'no user specified'}

class CheckString(Resource):
    def put(self):
        user = request.form.get('user', None)
        submission = request.form.get('submission', None)
        target = strings.get(user, None)
        print(user,submission,target)
        if target:
            score = levenshtein(submission,target)
            if submission == target:
                return {'response': 'correct'}
            else:
                return {'response': score}
        else:
            return {'response': 'unregistered'}

api.add_resource(FetchString, '/fetch-string')
api.add_resource(CheckString, '/check-string')

if __name__ == '__main__':
    app.run(debug=True)
